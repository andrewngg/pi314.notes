===============================================================================
為什麼 VimL 不是個好語言
===============================================================================

VimL 具有許多程式語言的部份特性

* 字串使用 ``.`` 相接，這點像 PHP
* 有 Dictionary 這個內建的 type，這點像 Python
* ``if`` 需要 ``endif`` 結尾，這點像 Shell Script
* Dictionary 的 ``["key"]`` 可以用 ``.key`` 存取，這點像 JavaScript
* 有內建的 ``map`` 和 ``filter`` ，這點像函數式語言，不過其他特性仍然是指令式的

但它的缺點真的不少（有些是我的主觀認定，但有些不是）

* 字串比對（ ``==`` ）的行為會根據使用者的 ``ignorecase`` 設定改變

  - 請改用 ``==#`` 和 ``==?``

* 預設「Regex 特殊符號是否需要跳脫」的行為很詭異

  - 小括號 ``(`` ``)`` 要跳脫，但 ``[`` ``]`` 不用
  - 請改用 ``\v`` ，讓 regex 用起來比較像 PCRE

* 自訂函式的開頭必須要大寫

  - 加了前綴可以避開這個限制

* 沒什麼幫助的錯誤訊息

  - 如果是語法出錯，訊息不會報在附近，而是在很遠的地方報錯

* 若有個函式沒有回傳值，要用 ``call`` 來 call 它，但有回傳值的函式不能這樣使用

  - 一樣，要是用錯方式，使用者不會直接從錯誤訊息看出來

* 函式可以被當成參數傳入別的函式，但得先用 ``function('name')`` 取得函式物件的 reference 才行
* list 可以做 slicing，但上下界都會包含在 slicing 的範圍內
* ``range()`` 函式的行為不一致

  - ``range(a)`` 會回傳 ``[0, 1, ..., a-1]``
  - ``range(a, b)`` 卻會回傳 ``[a, a+1, ..., b]``

* map 是 in-place 的
* List 可以用 ``for i in list`` 做迭代，但字串不行
* 字串和數字在運算時可能會自己轉換：不論 ``var`` 的 type 是 ``dict`` 或 ``string`` ， ``var['f']`` 都可以執行，只是結果和你預期的不一定相同
